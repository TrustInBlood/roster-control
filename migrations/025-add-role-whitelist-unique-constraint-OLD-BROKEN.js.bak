const { DataTypes } = require('sequelize');

module.exports = {
  async up(queryInterface, Sequelize) {
    console.log('üîß Adding unique constraint for role-based whitelist entries');

    try {
      // Check if index already exists
      const indexes = await queryInterface.showIndex('whitelists');
      const indexExists = indexes.some(index =>
        index.name === 'whitelists_unique_active_role_entry'
      );

      if (indexExists) {
        console.log('‚ö†Ô∏è  Index already exists, skipping...');
        return;
      }

      // IMPORTANT: Clean up any duplicates that may have been created after migration 024.5
      // This handles race conditions where duplicates were created between cleanup and constraint
      console.log('üîç Checking for any remaining duplicates before adding constraint...');

      const duplicates = await queryInterface.sequelize.query(`
        SELECT w1.id
        FROM whitelists w1
        WHERE w1.source = 'role'
          AND w1.revoked = false
          AND w1.id NOT IN (
            SELECT MAX(w2.id)
            FROM whitelists w2
            WHERE w2.source = 'role'
              AND w2.revoked = false
            GROUP BY w2.discord_user_id
          )
        ORDER BY w1.id
      `, { type: Sequelize.QueryTypes.SELECT });

      if (duplicates.length > 0) {
        console.log(`‚ö†Ô∏è  Found ${duplicates.length} new duplicates created since cleanup - removing them now...`);
        const duplicateIds = duplicates.map(d => d.id);

        await queryInterface.sequelize.query(`
          DELETE FROM whitelists
          WHERE id IN (${duplicateIds.join(',')})
        `, { type: Sequelize.QueryTypes.DELETE });

        console.log(`‚úÖ Removed ${duplicates.length} duplicate entries`);
      } else {
        console.log('‚úÖ No duplicates found - proceeding with constraint');
      }

      // MariaDB 10.3 doesn't support partial WHERE indexes
      // Use a composite unique index on (discord_user_id, source, revoked)
      // This allows multiple revoked=true entries but only one revoked=false per (user, source)
      await queryInterface.addIndex('whitelists', {
        name: 'whitelists_unique_active_role_entry',
        unique: true,
        fields: ['discord_user_id', 'source', 'revoked']
      });

      console.log('‚úÖ Successfully added unique constraint for role-based whitelist entries');

    } catch (error) {
      console.error('‚ùå Error adding unique constraint:', error.message);

      // Check if error is due to existing duplicates
      if (error.message.includes('Duplicate entry') || error.message.includes('UNIQUE')) {
        console.error('‚ö†Ô∏è  DUPLICATE ENTRIES DETECTED IN DATABASE!');
        console.error('‚ö†Ô∏è  Please run the following query to identify duplicates:');
        console.error('');
        console.error('    SELECT discord_user_id, COUNT(*) as count');
        console.error('    FROM whitelists');
        console.error('    WHERE source = \'role\' AND revoked = false');
        console.error('    GROUP BY discord_user_id');
        console.error('    HAVING count > 1;');
        console.error('');
        console.error('‚ö†Ô∏è  Clean up duplicates before running this migration.');
      }

      throw error;
    }
  },

  async down(queryInterface, Sequelize) {
    console.log('üîÑ Rolling back: Removing unique constraint for role-based whitelist entries');

    try {
      // Check if index exists before trying to remove it
      const indexes = await queryInterface.showIndex('whitelists');
      const indexExists = indexes.some(index =>
        index.name === 'whitelists_unique_active_role_entry'
      );

      if (!indexExists) {
        console.log('‚ö†Ô∏è  Index does not exist, skipping...');
        return;
      }

      // Remove the unique index
      await queryInterface.removeIndex('whitelists', 'whitelists_unique_active_role_entry');

      console.log('‚úÖ Successfully removed unique constraint');

    } catch (error) {
      console.error('‚ùå Error removing unique constraint:', error.message);
      throw error;
    }
  }
};
